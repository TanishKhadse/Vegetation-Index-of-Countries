# -*- coding: utf-8 -*-
"""Hackathon.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1faeIOaumZSvWqlCkgHviMF53cq7xFHR0
"""

#Helpful links:
# By Rutva and Tanish

# We reused some concepts from previous Colab projects this week.
# Works cited contains all of our links

# pip install cartopy

#Setup with files and a hash system

import os
import glob
import cv2 as cv
from google.colab.patches import cv2_imshow    
from skimage import io

# file_names = os.listdir('country_pics')

# ndvi_list = {}

# for name in file_names:
#   (c, end) = name.split('.')
#   ndvi_list[c] = name

import urllib.request
import cartopy.feature as cf
import cartopy.crs as ccrs
import cartopy.io.shapereader as shpreader
import matplotlib.pyplot as plt

#Data comes from a table in Wikipedia

source = urllib.request.urlopen("https://en.wikipedia.org/wiki/Land_use_statistics_by_country")
text = source.read().decode("utf-8")
print('------------------------------------------------------------------------------------------------------------------------\n')
userInput = input("Enter a country: ")
firstPart = userInput
if userInput == "Ireland":
  firstPart = "Republic of Ireland"
str_marker = 'title="'+firstPart+'">' + userInput
str_location = text.find(str_marker) + len(userInput) + 9

#Function to locate/extract the data

def find_percent(loc):
  global text
  new_text = text[loc : loc+100] 
  count = 0
  for n in range(len(new_text)):
    if new_text[n : n+4] == '<td>':
      count+=1
    if count == 4:
      new_text = new_text[n :]
      break
  if count == 4:
    return new_text[4 : new_text.find('</td>')]
  else:
    return 0
if find_percent(str_location) == 0:
  print('Could not find % of', userInput)
else:
  print(find_percent(str_location) + '% of', userInput + "'s land is arable")
  o_color = (float(find_percent(str_location)) / 100) * 1.2

#Mapping section (Cartopy)

fig = plt.figure(figsize=(15,15))
map1 = plt.axes(projection=ccrs.PlateCarree())
map1.add_feature(cf.OCEAN, alpha=1)
map1.add_feature(cf.BORDERS, alpha=0.25)
shpfile = shpreader.natural_earth(resolution='110m', category='cultural', name='admin_0_countries')
reader = shpreader.Reader(shpfile)
countries = reader.records()

#Fixes for conflicts with naming between Wikipedia's table and the map data.
if userInput == 'United States':
  cname = userInput + ' of America'
  print(cname)
else:
  cname = userInput

#The opacity / country locater code
for country in countries:
  if country.attributes["NAME"] == cname:
    map1.add_geometries([country.geometry], ccrs.PlateCarree(), facecolor=(0,1,0, o_color))
    break
plt.show()

# Getting NDVI Images from the hash table

# ndvi_name = userInput
# if " " in userInput:
#   (first, last) = userInput.split(' ')
#   ndvi_name = first+"_"+last
# for entry in ndvi_list.keys():
#   if entry == ndvi_name:
#     image = io.imread('country_pics/' + ndvi_list[ndvi_name])
#     image_2 = cv.cvtColor(image, cv.COLOR_BGR2RGB)
#     cv2_imshow(image_2)

